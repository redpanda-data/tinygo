version: 2.1

commands:
  submodules:
    steps:
      - run:
          name: "Pull submodules"
          command: |
            git submodule update --init
            pushd ./lib/binaryen
            git apply ../../.circleci/binaryen.patch
            popd
  hack-ninja-jobs:
    steps:
      - run:
          name: "Hack Ninja to use less jobs"
          command: |
            echo -e '#!/bin/sh\n/usr/bin/ninja -j3 "$@"' > /usr/local/bin/ninja
            chmod +x /usr/local/bin/ninja
  build-linux:
    parameters:
      target:
        type: string
        default: ""
      gourl:
        type: string
        default: ""
      zigurl:
        type: string
        default: ""
    steps:
      - checkout
      - run:
          name: "Install dependencies"
          command: |
            # install build deps
            dnf install -y \
                cmake \
                git \
                ninja-build \
                xz
            # install latest version of go
            mkdir -p /usr/local
            curl -s -L \
              <<parameters.gourl>> \
              | tar xz -C /usr/local 
            echo 'export PATH=$PATH:/usr/local/go/bin' >> "$BASH_ENV"
            source "$BASH_ENV"
            # install zig for a hermetic clang toolchain
            mkdir -p /usr/local/zig
            curl -s -L \
              <<parameters.zigurl>> \
              | tar xJ --strip-components=1 -C /usr/local/zig
            echo 'export PATH=$PATH:/usr/local/zig' >> "$BASH_ENV"
            source "$BASH_ENV"
            # create wrapper scripts for zig compilation
            echo -e '#!/bin/sh\nexec zig c++ -target <<parameters.target>> "$@"' > /usr/local/bin/zigc++
            echo -e '#!/bin/sh\nexec zig cc -target <<parameters.target>> "$@"' > /usr/local/bin/zigcc
            echo -e '#!/bin/sh\nexec zig ranlib "$@"' > /usr/local/bin/ranlib
            echo -e '#!/bin/sh\nexec zig ar "$@"' > /usr/local/bin/ar
            chmod +x /usr/local/bin/zigcc \
              /usr/local/bin/zigc++ \
              /usr/local/bin/ranlib \
              /usr/local/bin/ar
            # export the build variables
            echo 'export CC=zigcc' >> "$BASH_ENV"
            echo 'export CXX=zigc++' >> "$BASH_ENV"
            echo 'export AR=ar' >> "$BASH_ENV"
            echo 'export RANLIB=ranlib' >> "$BASH_ENV"
      - run:
          name: "Verify dependencies"
          command: |
            echo "go version installed:"
            command -v go
            go version
            echo "zig version installed:"
            command -v zig
            zig version
            echo "clang version installed:"
            zig cc --version
            env
      - submodules
      - hack-ninja-jobs
      - run: 
          name: "Download LLVM"
          command: |
            make llvm-source
            pushd ./llvm-project
            git apply ../.circleci/llvm-lseek64.patch
            popd
      - run: 
          name: "Build LLVM"
          command: make llvm-build
      - run: 
          name: "Build Tinygo"
          command: make release

jobs:
  build-amd64-linux:
    docker:
      - image: fedora:38
    resource_class: large
    steps:
      - build-linux:
          target: "x86_64-linux-musl"
          gourl: "https://go.dev/dl/go1.21.0.linux-amd64.tar.gz"
          zigurl: "https://ziglang.org/download/0.11.0/zig-linux-x86_64-0.11.0.tar.xz"
      - store_artifacts:
          path: ./build/release.tar.gz
  build-arm64-linux:
    docker:
      - image: fedora:38
    resource_class: arm.large
    steps:
      - build-linux:
          target: "aarch64-linux-musl"
          gourl: "https://go.dev/dl/go1.21.0.linux-arm64.tar.gz"
          zigurl: "https://ziglang.org/download/0.11.0/zig-linux-aarch64-0.11.0.tar.xz"
      - store_artifacts:
          path: ./build/release.tar.gz

workflows:
  build-all:
    jobs:
      - build-amd64-linux
      - build-arm64-linux
